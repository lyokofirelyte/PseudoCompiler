// ============= YOU MUST HAVE A MAIN MODULE =============
// ============= ALL MODULES MUST HAVE AN END =============

Module main()

Display "Hi there, welcome to the demo."
Display "This entire demo is in pseudo code from example.txt."
Display "You could have written this if you wanted to!"

// NO REFERENCE VARIABLES! THEY WILL BE TREATED AS NORMAL VARIABLES

// == Using Declare ==

Display "Demo on declaring variables\n"

	Declare String name
	Set name = "David"
	Display "The default name is ", name

	// Remember to seperate varaibles and strings with "," or "+"
	// variable, "String ", otherVariable, " string"

// == Gathering Input ==
// THERE ARE FOUR WAYS TO GATHER INPUT
// This is important if you are not using strings

	// == Input a string ==
	Display "Enter a new name!"
	input name
	Display "Great. Your new name is ", name, "!"

	// == Input an integer ==
	Display "Ok, how old are you?"
	Declare Integer age = 0
	Set age = inputAsInteger()
	Display "Cool, so you're ", age, " years old? [true/false]"

	// Let's review what we just did.
	// Since age is an integer, we can't input it as text.
	// If we typed 'input age' it would be a string and throw an error.
	// We must use inputAsInteger() to tell the program that you are typing a number.
	// It has a fail safe if you type a letter and will return 0 (and yell at you).

	// == Input a boolean ==
	Declare boolean userConfirm = inputAsBoolean()

	// Look familiar? They can type 'true' or 'false' and it will make it a boolean.

// == Input Validation ==

	while !userConfirm
		Display "Okay, enter your correct age then."
		Set age = inputAsInteger()
		Display "Is it correct now?"
		Set userConfirm = inputAsBoolean()
	end while

	Display "So far your name is ", name, " and you are ", age, " years old."
	Display "Please pick a major."

// == Select statements ==

	Declare String userMajor
	Display "Pick from...\nMath\nScience\nComputers\nOther\n"
	input userMajor
	
	// We can use \n to indicate a new line without typing 'Display' again.

	select toLower(userMajor)

	// Notice how we call the toLower function on userMajor.
	// Now we can check anything they input in all lower case.

		case "math":
			Display "Math is a good choice, I hope you like numbers!"
		break

		case "science":
			Display "Science is a great choice!"
		break

		case "computers":
			Display "Cool, maybe you'd be interested in this source code then!"
		break

		default:
			Display "Oh well, I'm sure you will decide later."
		break

	end select

	// Remember to use 'break' or it will keep going!
	// case "math": case "science": case "computers": without breaks will run ALL of them!
	// The default statement means "anything else"

// == If statements ==

	Display "Pop quiz! What was the default name?"
	Declare String answer
	input answer

	if (toLower(answer) == "david")
		Display "Correct! Bonus points for you!"
	else
		Display "That's not correct."
	end if

// == Arrays ==

	Display "Time for an INTEGER array. How big do you want the array?"
	Declare Integer arraySize
	arraySize = inputAsInteger()

	Declare Integer array[arraySize]

	Display "Neat. Give me some numbers to fill it with."

// == FOR LOOPS ==

	for index = 0 to arraySize - 1
		Display "A number, please!"
		array[index] = inputAsInteger()
	end for

	Display "All full. Here's what you put."

	for index = 0 to arraySize - 1
		Display array[index]
	end for

// == Math ==

	Display "What should I multiply by 100?"
	Declare Real userNumber = 0
	userNumber = inputAsReal()
	userNumber = userNumber*100
	Display "Your answer is: ", userNumber

// == do-while loops

	Display "Here comes a do-while loop! Type 'when' to stop it!"
	Declare boolean when = true
	Declare integer i = 0
	Declare String userInput

	do-while when == true

		Display "ROUND ", i+1
		i++
		Display "When?"
		input userInput
		when = !(userInput == "when")

	end do-while

	// I made this a little more advanced just to show some other techniques
	// You could just as "Y/N" and do an if statement.
	// Also, insert 'break' in a line to get out of the loop right away.

	// while true runs forever UNLESS we break out of it with 'break'

	while true
		Display "Type X to exit this loop."
		input userInput
		if (userInput == "X")
			break
		end if
	end while

	// Hidden secret, my compiler just looks for 'end', you could type 'end potato' and it would work.
	// But don't do that.
	// i++ means "Set i = i + 1". You can do i-- to subtract 1.
	// You could also do i += 1.

// == PAUSING ==

	// This could be useful for your final projects (if the teacher allows it)
	// I added a 'sleep' key word to pause the program for X seconds
	// Just type 'sleep X', replacing X with seconds to wait.

	Display "Okay, pausing the program for 2 seconds."
	sleep 2
	Display "And the wait is over."
	Display "That was fun, right?"

// == FUNCTIONS ==

	Display "Calling getDefaultName() -> ", getDefaultName()
	Display "You entered ", name, " as your name though, so..."
	Display "Calling changeName(name)"
	Set name = changeName(name)
	Display "Now the name is set to ", name
	Display "It was a bit silly, but it shows how to handle paramaters"

// == RAW C# Integration ==

	Display "You can mix c# into your code if you know how to."
	Display "Would you like to see rainbows? [Y/N]"
	Display "WARNING: FLASHING COLORS"

	if (Console.ReadLine().ToLower().Equals("y"))
        Array arr = Enum.GetValues(typeof(ConsoleColor));
        Random rand = new Random();

        for (int x = 0; x < 20; x++)
        {
            int sel = rand.Next(arr.Length);
            Console.ForegroundColor = (ConsoleColor)arr.GetValue(sel);
            sel = rand.Next(arr.Length);
            Console.BackgroundColor = (ConsoleColor)arr.GetValue(sel);
            Console.Clear();
            for (int xx = 0; xx < Console.WindowHeight; xx++){ Console.WriteLine("Rainbows!"); }
            System.Threading.Thread.Sleep(200);
        }

        Console.BackgroundColor = ConsoleColor.Black;
        Console.ForegroundColor = ConsoleColor.White;
        Console.Clear()

    end if

    // OTHER THINGS
    // You can do isString(input), isBoolean(input), and isInteger(input) - they return true or false
    // As well as toLower(input), toUpper(input)

end module

Function String getDefaultName()

	return "David"

end function

Function String changeName(String inputName)

	return inputName + " the great"

end function